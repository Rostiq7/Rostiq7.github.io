/* ------------ Clearfix float mixin ------------ */

@mixin clearfix() {
  &:before,
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

/* ------------ Fonts mixin ------------ */

@mixin font($font-family, $file-path, $weight: normal, $style: normal) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    src: url('#{$file-path}.eot?#iefix');
    src: url('#{$file-path}.eot') format('embedded-opentype'),
      url('#{$file-path}.woff') format('woff'),
      url('#{$file-path}.woff2') format('woff2'),
      url('#{$file-path}.ttf') format('truetype');
  }
}

// @mixin font($f-name, $f-url , $f-weight: normal, $f-style: normal){
// 	@font-face{
// 		font-family: $f-name;
// 		font-style: $f-style;
// 		font-weight: $f-weight;
// 		src: url('#{$f-url}.woff2') format('woff2');
// 		src: url('#{$f-url}.woff') format('woff');
// 		src: url('#{$f-url}.ttf') format('truetype');
// 	}
// }

/* ------------ Container mixin ------------ */

@mixin min-max($min-width, $max-width, $padding) {
  min-width: $min-width;
  max-width: $max-width;
  padding: 0 $padding;
  box-sizing: border-box;
  margin: 0 auto;
}

/* ------------ Adaptive video mixin ------------ */

@mixin adaptive-video() {
  position: relative;
  padding-bottom: 56.25%; /* задаёт высоту контейнера для 16:9 (если 4:3 — поставьте 75%) */
  height: 0;
  overflow: hidden;

  iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

/* ------------ Adaptive images mixin ------------ */

@mixin adaptive-img() {
  display: block;
  max-width: 100%;
  height: auto;
  &.img-width {
    width: 100%;
  }
}

/* ------------ Visually hidden mixin ------------ */

@mixin visually-hidden() {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;
  white-space: nowrap;
  clip-path: inset(100%);
  clip: rect(0, 0, 0, 0);
  overflow: hidden;
}

/* ------------ PX to REM v.1 mixin ------------ */

// @function rem($size, $basicSize: 16px) {
//   @return $size / $basicSize#{rem};
// }

/* ------------ PX to REM v.2 mixin ------------ */

$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
  @if $separator == 'comma' or $separator == 'space' {
    @return append($list, null, $separator);
  }

  @if function-exists('list-separator') == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if
      type-of($value) ==
      'number' and
      unit($value) ==
      'px' and
      $to ==
      'rem'
    {
      $result: append($result, $value / $rem-baseline * 1rem, $separator);
    } @else if type-of($value) == 'list' {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == 'map' {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

/* ------------ Dynamic text mixin ------------ */

@mixin dynamicText(
  $minSizePercent,
  $maxSize,
  $minSize,
  $minWidthPx,
  $maxWidth,
  $minWidth
) {
  font-size: calc(
    #{$minSizePercent} + (#{$maxSize} - #{$minSize}) * (100vw - #{$minWidthPx}) /
      (#{$maxWidth} - #{$minWidth})
  );
}

/* ------------ Buttons mixin ------------ */

@mixin button($two-button: false) {
  display: inline-block;
  border: none;
  color: $white;
  font-family: $font;
  text-decoration: none;
  background-color: $accent-color;
  padding: rem(17px 40px);
  font-size: rem(13px);
  text-transform: uppercase;
  font-weight: 700;
  border-radius: rem(2px);
  text-align: center;
  // position: relative;
  line-height: 1;
  outline: none;
  transition: all 0.5s ease;
  cursor: pointer;

  &:focus,
  &:hover {
    background-color: darken($accent-color, 10%);
  }
}
