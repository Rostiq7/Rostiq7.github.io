@mixin min-max($min-width, $max-width, $padding) {
  min-width: $min-width;
  max-width: $max-width;
  padding: 0 $padding;
  box-sizing: border-box;
  margin: 0 auto;
}
@mixin font-face($font-family, $file-path, $weight: normal, $style: normal, $asset-pipeline: false ) {
	@font-face {
		font-family: $font-family;
		font-weight: $weight;
		font-style: $style;

		@if $asset-pipeline == true {
			src: font-url('#{$file-path}.eot');
			src: font-url('#{$file-path}.eot?#iefix') format('embedded-opentype'), font-url('#{$file-path}.woff') format('woff'), font-url('#{$file-path}.ttf') format('truetype');
		} @else {
			src: url('#{$file-path}.eot');
			src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'), url('#{$file-path}.woff') format('woff'), url('#{$file-path}.ttf') format('truetype');
		}
	}
}



// px to rem
$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  } 
  
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);
  
  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline * 1rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

// Button
@mixin button($two-button:false) {
  display: inline-block;
	border: none;
	color: $black;
	text-decoration: none;
  background-color: $accent-bg;
  padding: rem(16px 41px);
	font-size: rem(15px);
	text-transform: uppercase;
	font-weight: $bold;
	border-radius: rem(5px);
	text-align: center;
  line-height: 1;
	outline: none;
	transition: all .4s ease;
  cursor: pointer;

  &_block{
    display: block;
    max-width: 100%;
  }
  &_size--big{
    padding: rem(20px 60px);
  }
  &_size{
    &--medium{
      height: rem(40px);
      padding: rem(0px 5px);
      font-weight: $medium;
      width: 38%;
    }
  }
  &_theme{
    &--gray{
      background-color: #4e4e4e;
      color: $white;
     
      &:hover{
        background-color: lighten(#4e4e4e, 5%);
        color: darken($white, 5%);
      }
      &:focus{
        background-color: darken(#4e4e4e, 5%);
        color: darken($white, 5%);
      }
    }
    &--yellow{
      &:hover{
        background-color: lighten($accent-bg, 5%);
        color: lighten($black, 5%);
      }
      &:focus{
        background-color: darken($accent-bg, 5%);
        color: lighten($black, 5%);
      }
    }
  }
	&:focus, &:hover{
    text-decoration: none;
    outline: none;
  }
 
  @if $two-button == true{
    &:first-child{
      margin-right: 25px;
    }
  }
}